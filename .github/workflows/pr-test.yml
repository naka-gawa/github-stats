name: Pull Request Test Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"

      - name: Cache Go modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install aqua
        uses: aquaproj/aqua-installer@5e54e5cee8a95ee2ce7c04cb993da6dfad13e59c # v3.1.2
        with:
          aqua_version: v2.36.1

      - name: Install dependencies
        run: |
          make init
          go mod download
          go mod tidy

      - name: Run tests
        id: test
        run: |
          # Format code before running tests
          make format
          # Run tests and capture output
          make test 2>&1 | tee test_output.txt
          echo "test_exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT

      - name: Comment test results on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: always()
        with:
          script: |
            const fs = require('fs');
            const testExitCode = '${{ steps.test.outputs.test_exit_code }}';

            let testOutput = '';
            try {
              testOutput = fs.readFileSync('test_output.txt', 'utf8');
            } catch (error) {
              testOutput = 'failed to read test output file';
            }

            const success = testExitCode === '0';
            const emoji = success ? ':white_check_mark:' : ':x:';
            const status = success ? 'PASSED' : 'FAILED';

            const body = `## ${emoji} test result: ${status}

            ### command executed
            \`\`\`
            make test
            \`\`\`

            ### test output
            <details>
            <summary>Click to expand</summary>

            \`\`\`
            ${testOutput}
            \`\`\`
            </details>

            ${success ?
              ':tada: success! All tests passed!' :
              ':warning: Some tests failed. Please check the output above.'};
            `;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              (comment.body.includes('## :white_check_mark: test result:') ||
               comment.body.includes('## :x: test result:'))
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Fail job if tests failed
        if: steps.test.outputs.test_exit_code != '0'
        run: exit 1
